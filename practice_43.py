# 키워드 인수 

"""
위치인수의 경우 인수 대입 순서가 어긋나면 제대로 된 값을 출력하기 힘들다. 이때 키워드 인수를 사용하여 인수의 순서와
용도의 기억없이 편하게 사용이 가능하다.

함수=(키워드=인수값)

"""

def fun(name,univ,age):
    print("이름은 {0}이고 학교는 {1}이며 나이는 {2}살이다.".format(name,univ,age))

fun("정재형","경상대",25)
fun("경상대",25,"정재형")
fun(univ="경상대",age=25,name="정재형")


"""
딕셔너리 언패킹 = 딕셔너리를 사용하여 키워드 인수로 값을 넣는 것

함수(**딕셔너리)

애스터리스크를 2개 사용한다
"""

def fun2(이름,성적,자격갯수):
    print("이름:"+이름+", 성적:"+str(성적)+", 자격갯수:"+str(자격갯수))

a = {"이름":"정재형","성적":90,"자격갯수":4}
fun2(**a)

# 딕셔너리 변수 사용 없이 직접 입력해도 상관 없음!!

def fun3(이름,성적,자격갯수):
    print("이름:"+이름+", 성적:"+str(성적)+", 자격갯수:"+str(자격갯수))

fun2(**{"이름":"정재형","성적":90,"자격갯수":4})

"""
키워드 인수를 사용하는 가변인수함수 만들기

def 함수이름(**매개변수):
들여쓰기  코드

여기서 매개변수의 이름은 keyword arguments 를 줄여 kwargs 를 사용하고
for문을 통해 요소에 접근할 수 있다.
"""


def fun4(**kwargs):
    for i , j in kwargs.items():
        print(i,j)

a={'이름':"헴스터",'별명':"힙스터","나이":"4개월"}
fun4(**a)



# fun4(이름="홍길동")
# fun4(이름="햄스터",별명="힙스터",나이="4개월")

# def personal_info(**kwargs):
#     for kw, arg in kwargs.items():
#          print(kw, ': ', arg, sep='')

# personal_info(name='홍길동')

"""
초깃값 지정

함수호출 시 항상 인수를 매개변수 갯수만큼 넣어 값을 전달하였는데. 초기값을 통해 인수 생략이 가능하다.
매개변수에 초기값이 있더라도 인수로 값을 넣으면 넣은 값이 전달되는 특징이 있음.

def 함수이름(매개변수=값):
들여쓰기 코드
"""

def func(name,age,address="비공개"): # address 매개변수에 "비공개"라는 초기값을 할당해 두었음
    print("{0}의 나이는 {1}살이고 주소는 {2}입니다.".format(name,age,address))

func("정재형",25)

# func("박의진",23,"경상남도 진주시")

# # 주의 : 초기값이 있는 매개변수 뒤에 초기값이 없는 매개변수가 위치하면 오류가 발생한다.

# def dunc2(a,b="jjh",c=1):
#     print(a,b,c)

# dunc2(10,"22",22)

