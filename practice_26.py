# 표준 입출력 ( sep 명령 , end 명령 , sys 모듈 , 딕셔너리 출력[items,rjust,ljust] , zfill )
# 포멧 : 데이터 출력,인쇄등을 위하여 설정하는 일정한 형식
#--------------------------------------------------------------------------------

print("python"+"java") # 띄어쓰기 없이 바로 연결. 출력 = pythonjava

print("python","java") # 띄어쓰기 있는 연결. 출력 = python java

#--------------------------------------------------------------------------------
# , 를 썼을 때 seperate(분리된)의 sep 를 이용하여 띄어쓰기부분의 서식을 정할 수 있음.
#--------------------------------------------------------------------------------

print("python","java",sep="   ") # 띄어쓰기 3칸
# python   java
print("python","java",sep="/")
# python/java
print("python","java","C language",sep=" vs ")
# python vs java vs C language

#--------------------------------------------------------------------------------
# 원래 프린트문은 실행 후 밑칸으로 커서가 내려가는데 end를 통해 원하는 프린트문 종료 서식을 정할 수 있음.
#--------------------------------------------------------------------------------

print("python","java",sep=" 과 ",end="!!!!!! ")
# python 과 java!!!!!! 
print("python","java",sep=" 과 ",end="중 뭐가 더 어려울까요? ")
print("저는 파이썬이 더 어려운 거 같아요.")
# python 과 java중 뭐가 더 어려울까요? 저는 파이썬이 더 어려운 거 같아요.

#--------------------------------------------------------------------------------
# sys 모듈
#--------------------------------------------------------------------------------

import sys # sys모듈 임포트(수입)

print("Python","Java",file=sys.stdout) # 표준출력으로 문장이 출력
print("Python","Java",file=sys.stderr) # 표준에러로 문장이 출력

# Python Java
# Python Java
# 나중에 배울 표준에러 로그수정 시 후자를 씀.

#--------------------------------------------------------------------------------

score = {"수학":0,"영어":50,"코딩":100}
for subject, score in score.items():
    print(subject,score)
# 수학 0
# 영어 50
# 코딩 100
    
# 위를 더 깔끔히 만들어 보자]
    
score = {"수학":0,"영어":50,"코딩":100}
for subject, score in score.items():
    print(subject.ljust(8),str(score).rjust(4), sep=":")
# 수학      :   0
# 영어      :  50
# 코딩      : 100
    
# .items() 를 통해 딕셔너리에 있는 키와 값을 쌍으로 불러올 수 있음. 특히 반복문으로 키-값 접근에 유용함.
# 변수.ljust(숫자) 숫자만큼의 자리를 할당하고, 왼쪽(left)부터 변수의 값을 나열함.
# 변수.rjust(숫자) 숫자만큼의 자리를 할당하고, 오른쪽(right)부터 변수의 값을 나열함.
# 즉 위를 잘 이용하면 출력값처럼 예쁘게 정형화된 출력을 얻을 수 있음. (포멧)
    

#--------------------------------------------------------------------------------

# 은행 대기표같은건 001 002 003 004 .. 이런식으로 앞에 0이 들어있음.
# 값이 없는 부분을 0으로 채우는 포멧을 위해 zfill을 사용함.
    
for num in range(1,11):
    print('대기번호 '+str(num))
# 대기번호 1
# 대기번호 2
# 대기번호 3
# 대기번호 4 ... 식으로 출력됨, 우리가 원하는 001 이런 식으로 안나온다는 말임.

for num in range(1,11):
    print('대기번호 '+str(num).zfill(3))
# 대기번호 001
# 대기번호 002
# 대기번호 003
# 대기번호 004 ...zfill(숫자) 의 숫자만큼의 공간만큼 확보 후 내용 없는 곳에 z(zero)로 채워짐.

#--------------------------------------------------------------------------------

# 표준 입력 연습

ans = input("아무 값이나 입력하시오 : ")
print("입력하신 값은 {0}이군요.".format(ans))
print(type(ans))

# 아무 값이나 입력하시오 : 10
# 입력하신 값은 10이군요.
# <class 'str'>   10을 넣었는데 str 타입이라고 출력됨.

# input으로 입력값을 넣으면 그게 정수든 실수든 무조건 문자형으로 저장이 된다.
# 즉 프린트문에서 str형이 아닌 값이라 해도 str()를 씌울 필요가 없다.