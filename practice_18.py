# 튜플 및 세트 및 자료구조 변경

# ----------------------------------------------------------------------------------------------

# [ 튜플 ]
# 튜플은 리스트와 다르게 내용변경을 할 수 없어 한정적인 대신 리스트보다 속도가 빠르다.
# 변경되지 않는 목록을 사용하기에 적합함. 

# 예를들어 절대 메뉴를 변경하지 않는 카레집이 있다고 치자.
menu = ("돼지고기 카레","소고기 카레","인도식 커리")

# 튜플형 자료에서 객체값을 출력할 땐 [] 를 그냥 쓰면 된다.
print(menu[0]) # 돼지고기 카레
print(menu[1]) # 소고기 카레
print(menu[2]) # 인도식 커리

# 튜플은 아까 말했듯이 처음 선언 내용에서 변경이 불가능하다. 즉 위 메뉴에서 추가/수정 등은 불가능하다.
# menu.add("닭고기 카레")  이런식으로 메뉴 추가가 불가능하다는 뜻.

이름 = "정재형"
취미 = "코딩"
나이 = 25
print(이름,취미,나이) # 정재형 코딩 25

이름 , 취미 , 나이 = "카리나" , "여행" , 22
print(이름,취미,나이) # 카리나 여행 22
이름 , 취미 , 나이 = "윈터" , "영어" , 29
print(이름,취미,나이) # 윈터 영어 29

# ----------------------------------------------------------------------------------------------

# [ 세트 ]
# 세트는 집합이란 뜻이고 서로 중복되는 원소가 있으면 안되고 순서가 없다.
# 세트를 정의하는 두가지 방법은   " 변수={a,b,...} "   또는  " 변수=set([a,b,...]) "
my_set = {1,2,3,4,4,4}  # 사전형에서는 {} 안에 : 가 들어갔지만, 세트(집합)에서는 그냥 {a,b,c} 값만 나열하면 됨.
print(my_set) # {1, 2, 3, 4} . 4가 3번 있지만 중복을 허용하지 않는 세트에서는 한번만 표시된다.



java_dev = {"정재형","아이유","박의진"}  # 세트 선언
pyth_dev = set(["정재형","햄스터","캥거루"])  # 세트 선언

# [교집합]
# 두 세트의 교집합을 출력하는 방법은 두가지가 있다.
print(java_dev & pyth_dev) # 출력 = {'정재형'}
print(java_dev.intersection(pyth_dev)) # 출력 = {'정재형'}

# [합집합]
# 두 세트의 합집합을 출력하는 방법은 두가지가 있다.
print(java_dev | pyth_dev) # {'햄스터', '박의진', '아이유', '정재형', '캥거루'}
print(java_dev.union(pyth_dev)) # {'햄스터', '박의진', '아이유', '정재형', '캥거루'}

# [차집합]
# 예를들어 java는 가능하지만 python은 불가능한 사람을 뽑는 경우
print(java_dev - pyth_dev ) # 자바가능자에서 파이썬가능자를 뺌, 출력 = {'박의진', '아이유'}
print(java_dev.difference(pyth_dev)) # 출력 = {'박의진', '아이유'}

# 파이썬 교육 이후 파이썬가능자가 들어나서 파이썬 집합에 원소를 추가할 경우
pyth_dev.add("박의진")
print(pyth_dev) # {'정재형', '햄스터', '박의진', '캥거루'}
# 집합은 순서가 상관이 없기에 출력시의 순서는 신경쓰지 말자

# 자바를 까먹어서 자바가능자의 원소를 제거할 경우
java_dev.remove("아이유")
print(java_dev) # {'정재형', '박의진'}

# ----------------------------------------------------------------------------------------------

# [자료구조 변경]

menu = {"아메리카노","카페라떼","초코라떼"} # 세트형인 menu 변수 선언
print(menu,type(menu)) # 집합인 메뉴의 원소들 출력하고 menu의 타입형을 출력함.
# 위에서 출력 = {'아메리카노', '초코라떼', '카페라떼'} <class 'set'>

menu = list(menu)
print(menu,type(menu)) # list() 로 감싸면서 리스트형이 됨.
# 위에서 출력 = ['초코라떼', '아메리카노', '카페라떼'] <class 'list'>

menu = tuple(menu)
print(menu,type(menu)) # tuple() 로 감싸면서 리스트형이 됨.
# 위에서 출력 = ('초코라떼', '아메리카노', '카페라떼') <class 'tuple'>

menu = set(menu)
print(menu,type(menu)) # set() 로 감싸면서 다시 set형이 됨.
# 위에서 출력 = # 위에서 출력 = {'아메리카노', '초코라떼', '카페라떼'} <class 'set'>